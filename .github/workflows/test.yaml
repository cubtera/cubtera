on:
  workflow_dispatch:
  push:
      branches:
      - action-check

permissions:
  contents: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

name: Cubtera test release
jobs:
#  release:
#    name: Release please action
#    runs-on: ubuntu-latest
#    outputs:
#      release_created: ${{ steps.release.outputs.release_created }}
#      upload_url: ${{ steps.release.outputs.upload_url }}
#      tag_name: ${{ steps.release.outputs.tag_name }}
#    steps:
#      - uses: googleapis/release-please-action@v4
#        id: release
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          release-type: rust

  build:
    name: Build and release #for ${{ matrix.name }}
#    needs: release
#    if: ${{ needs.release.outputs.release_created }}
    runs-on: ubuntu-22.04 #${{ matrix.os }}
#    strategy:
#      matrix:
#        name: [
#            linux,
#            macos,
#            macos-arm64
#        ]
#        include:
#          - name: linux
#            os: ubuntu-22.04
#            target: x86_64-unknown-linux-musl
#            asset_name: cubtera-linux-intel
#
##          - name: linux-arm64
##            os: ubuntu-22.04
##            target: aarch64-unknown-linux-musl
##            asset_name: cubtera-linux-arm64
#
#          - name: macos
#            os: macos-13
#            target: x86_64-apple-darwin
#            asset_name: cubtera-darwin-intel
#
#          - name: macos-arm64
#            os: macos-13
#            target: aarch64-apple-darwin
#            asset_name: cubtera-darwin-aarch64

    steps:
      - uses: actions/checkout@v4
      - name: Rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
      - name: Pre-build #${{ matrix.name }}
        #if: ${{ matrix.name == 'linux' }}
        run: |
          sudo apt update
          sudo apt install -y -qq curl gcc pkg-config musl-tools libssl-dev
          sudo update-ca-certificates
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          export PATH=$PATH:$HOME/.cargo/bin
          

      - name: Build # ${{ matrix.name }}
        run: |
          sudo apt-get install gcc-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
          cargo build --release --all --target aarch64-unknown-linux-gnu 

#          ${{ matrix.target }}
#
#      - name: Archive ${{ matrix.name }}
#        run: |
#          zip -j ${{ matrix.asset_name }}.zip target/${{ matrix.target }}/release/cubtera
#          tar -cjf ${{ matrix.asset_name }}.tar.gz -C target/${{ matrix.target }}/release .
          
#      - name: Upload ${{ matrix.name }} binary to release
#        run: |
#          SHA256_ZIP=$(shasum -a 256 ${{ matrix.asset_name }}.zip | cut -d ' ' -f 1)
#          echo "$SHA256_ZIP ${{ matrix.asset_name }}.zip" > ${{ matrix.asset_name }}.zip.sha256
#          SHA256_TAR=$(shasum -a 256 ${{ matrix.asset_name }}.tar.gz | cut -d ' ' -f 1)
#          echo "$SHA256_TAR ${{ matrix.asset_name }}.tar.gz" > ${{ matrix.asset_name }}.tar.gz.sha256
#
#          gh release upload ${{ needs.release.outputs.tag_name }} ${{ matrix.asset_name }}.zip ${{ matrix.asset_name }}.zip.sha256 --clobber
#          gh release upload ${{ needs.release.outputs.tag_name }} ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }}.tar.gz --clobber
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Upload binary as artifact
#        uses: actions/upload-artifact@v4
#        if: ${{ matrix.name == 'linux' }}
#        with:
#          name: ${{ matrix.asset_name }}
#          path: target/${{ matrix.target }}/release/cubtera
#          retention-days: 1

#      - name: Calculate SHA256
#        id: calculate_sha
#        run: |
#          SHA256_ZIP=$(shasum -a 256 cubtera-darwin-aarch64.zip | cut -d ' ' -f 1)
#          SHA256_TAR=$(shasum -a 256 cubtera-darwin-aarch64.tar.gz | cut -d ' ' -f 1)
#
#          echo "SHA256_ZIP=$SHA256_ZIP" >> $GITHUB_OUTPUT
#          echo "SHA256_TAR=$SHA256_TAR" >> $GITHUB_OUTPUT

#      - name: Trigger formula update
#        run: |
#          cat << EOF > payload.json
#          {
#            "event_type": "update_formula",
#            "client_payload": {
#              "version": "0.1.0",
#              "zip_sha": "13489577483756839275683756837456",
#              "tar_sha": "35387598237095870932875098375092"
#            }
#          }
#          EOF
#
#          gh api \
#          --method POST \
#          -H "Accept: application/vnd.github.v3+json" \
#          /repos/cubtera/homebrew-cubtera/dispatches \
#          --input payload.json
#
#        env:
#          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

#  publish_docker:
#    name: Publish docker image
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#    needs: build
#    if: ${{ needs.release.outputs.release_created }}
#    steps:
#      - uses: actions/checkout@v4
#      - name: Download linux binary from artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: cubtera
#
#      - name: Get tag name
#        id: get-tag
#        run: |
#          TAG_NAME=$(grep version Cargo.toml | awk -F '"' '{ print $2 }' | head -1)
#          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@v3
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Set Docker tags
#        id: meta
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#          tags: |
#            latest
#            ${{ steps.get-tag.outputs.tag_name }}
#
#      - name: Build and push Docker image
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#          build-args: |
#            from_image=scratch